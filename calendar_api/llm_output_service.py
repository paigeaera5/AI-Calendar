from typing import List
import re


class LlmOutputData:
    """Class for storing data generated by llm."""
    def __init__(
            self,
            llm_output: str
    ) -> None:
        self.total_time_str = ""
        self.task_list = self._split_tasks(llm_output=llm_output.splitlines())
        self.task_lengths = self._find_task_lengths(subtasks=self.task_list)

    def _split_tasks(
            self,
            llm_output: List
    ) -> List:
        subtasks = []
        task = ""
        for line in llm_output:
            line = line.strip()
            if task == "":
                task += line
                continue
            elif "Total time" in line:
                self.total_time_str = line
                continue
            elif re.match(r'^[0-9]+\.', line):
                subtasks.append(task)
                task = line
                continue
            task += '\n' + line
        if task != "":
            subtasks.append(task)
        return subtasks
    
    def _find_task_lengths(
            self,
            subtasks: List
    ) -> List:
        lengths = []
        for task in subtasks:
            time_idx = task.find('(time:') + 6
            time_end = task.find(')', time_idx)
            num, interval = task[time_idx:time_end].strip().split()
            num = int(num)
            lengths.append((num, interval))
        return lengths
